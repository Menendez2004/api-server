# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type CategoriesClass {
  id: ID!
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type ImagesTypes {
  id: ID!
  productId: String!
  imageUrl: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ProductsTypes {
  id: ID!
  name: String!
  description: String!
  stock: Float!
  isAvailable: Boolean!
  price: Float!
  categories: [CategoriesClass!]!
  images: [ImagesTypes!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type CartItemType {
  id: ID!
  product: ProductsTypes!
  quantity: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type CartType {
  id: ID!
  cartItems: [CartItemType!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type RemoveProductCartRes implements RecordDeletion {
  deleted_at: DateTime!
}

interface RecordDeletion {
  deleted_at: DateTime!
}

type UpdateProductCartRes implements RecordUpdate {
  updated_at: DateTime!
  updatedAt: DateTime!
}

interface RecordUpdate {
  updated_at: DateTime!
}

type CreateProductsRes {
  id: ID!
  name: String!
  CreatedAt: String!
}

type DeletedProductsRes {
  deletedAt: String!
}

type PaginationMeta {
  totalItems: Int!
  totalPages: Int!
  limit: Int!
  page: Int!
}

type ProductType {
  id: String!
  name: String!
  price: Float!
  description: String!
  stock: Float!
  isAvailable: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ProductsPagination {
  collection: [ProductType!]!
  meta: PaginationMeta!
}

type UserRoles {
  id: ID!
  role: String!
  created_at: DateTime!
  updated_at: DateTime!
}

type User {
  id: ID!
  first_name: String!
  last_name: String!
  email: String!
  is_email_verified: Boolean!
  role_id: Float!
  address: String!
  password: String!
  created_at: DateTime!
  updated_at: DateTime!
  role: UserRoles!
}

type PaymentStatusType {
  id: ID!
  status: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type PaymentDetailType {
  id: ID!
  payment_intent_id: String!
  payment_method_id: String!
  order_id: String!
  amount: Float!
  status: PaymentStatusType!
  created_at: DateTime!
  updated_at: DateTime!
  payment_date: DateTime!
}

type OrderDetailType {
  id: String!
  order_id: String!
  product_id: String!
  quantity: Int!
  unit_price: Int!
  created_at: DateTime!
  updated_at: DateTime!
  product: ProductsTypes!
}

type Query {
  getCarts: CartType!
  findAllProducts(filters: ProductFiltersInput, sortBy: SortingProductInput, pagination: PaginationInput): ProductsPagination!
}

input ProductFiltersInput {
  name: String
  price: String
  categoryId: Float
  isAvailable: Float
}

input SortingProductInput {
  field: ProductSortableField! = NAME
  order: SortOrder! = ASC
}

enum ProductSortableField {
  NAME
  CREATED_AT
  UPDATED_AT
  LIKES_COUNT
  PRICE
}

enum SortOrder {
  ASC
  DESC
}

input PaginationInput {
  page: Int = 1
  limit: Int = 20
}

type Mutation {
  addOrUpdateCartProduct(data: UpsertCartItemInput!): UpdateProductCartRes!
  removeProductFromCart(data: RemoveProductFromCartArgs!): RemoveProductCartRes!
  createProduct(data: CreateProductInput!): CreateProductsRes!
  removeProduct(id: String!): DeletedProductsRes!
}

input UpsertCartItemInput {
  productId: String!
  cartId: String!
  quantity: Int!
}

input RemoveProductFromCartArgs {
  productId: String!
  cartId: String!
}

input CreateProductInput {
  name: String!
  description: String!
  price: Int!
  categoryId: [Int!]!
  stock: Int!
  isAvailable: Boolean! = true
}