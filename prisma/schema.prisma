// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// Prisma Client Generator
datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Database configuration
generator client {
    provider = "prisma-client-js"
}

enum TokenType {
    VERIFICATION_EMAIL
    RESET_PASS
}

enum RoleName {
    MANAGER
    CLIENT
}

model User {
    id        Int      @id @default(autoincrement())
    uuid      String   @unique @default(uuid()) @db.Uuid
    firstName String
    lastName  String
    username  String
    email     String   @unique @db.VarChar(255)
    password  String   @db.VarChar(100)
    addresses String
    roleId    Int      @default(2)
    isActive  Boolean  @default(false) // Changes when user confirms email
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    role               UserRole            @relation(fields: [roleId], references: [id])
    verificationTokens VerificationToken[]
    Cart               Cart?
    Order              Order[]
    Favorite           Favorite[]

    @@index([email, id, uuid])
}

model UserRole {
    id        Int      @id @default(autoincrement())
    uuid      String   @unique @default(uuid()) @db.Uuid
    name      RoleName
    createdAt DateTime @default(now())

    users User[]
}

model VerificationToken {
    id         String   @id @default(uuid()) @db.Uuid
    token      String   @unique
    id_user    String   @db.Uuid
    token_type Int
    is_used    Boolean
    expired_at DateTime
    created_at DateTime @default(now())
    updated_at DateTime @default(now()) @updatedAt

    user      User             @relation(fields: [id_user], references: [uuid])
    tokenType VerificationType @relation(fields: [token_type], references: [id])

    @@index([id_user])
    @@index([expired_at])
}

model VerificationType {
    id        Int       @id @default(autoincrement())
    uuid      String    @unique @default(uuid()) @db.Uuid
    tokenType TokenType
    createdAt DateTime  @default(now())
    updatedAt DateTime  @default(now()) @updatedAt

    verificationTokens VerificationToken[]
}

model Product {
    id           Int      @id @default(autoincrement())
    uuid         String   @unique @default(uuid()) @db.Uuid
    name         String
    description  String
    price        Float
    stock        Int
    is_available Boolean  @default(true)
    created_at   DateTime @default(now())
    updated_at   DateTime @default(now()) @updatedAt

    cartItems    CartItem[]
    orderDetails OrderDetail[]
    favorites    Favorite[]
    categories   ProductCategory[]
    images       ProductImages[]

    @@index([id, is_available])
}

model Cart {
    id         Int      @id @default(autoincrement())
    uuid       String   @unique @default(uuid()) @db.Uuid
    uuid_user  String   @unique @db.Uuid
    created_at DateTime @default(now())
    updated_at DateTime @default(now()) @updatedAt

    user       User       @relation(fields: [uuid_user], references: [uuid])
    cart_items CartItem[]

    @@index([uuid_user])
}

model CartItem {
    id           Int      @id @default(autoincrement())
    uuid         String   @unique @default(uuid()) @db.Uuid
    uuid_cart    String   @unique @db.Uuid
    uuid_product String   @unique @db.Uuid
    quantity     Int
    created_at   DateTime @default(now())
    updated_at   DateTime @default(now()) @updatedAt

    cart    Cart    @relation(fields: [uuid_cart], references: [uuid])
    product Product @relation(fields: [uuid_product], references: [uuid])

    @@unique([uuid_cart, uuid_product])
    @@index([uuid_cart, uuid_product, uuid])
}

model Order {
    id              Int      @id @default(autoincrement())
    uuid            String   @unique @default(uuid()) @db.Uuid
    uuid_user       String   @db.Uuid
    address         String
    created_at      DateTime @default(now())
    updated_at      DateTime @default(now()) @updatedAt

    user         User          @relation(fields: [uuid_user], references: [uuid])
    orderDetails OrderDetail[]

    @@index([id, uuid_user])
}

model OrderDetail {
    id           Int      @id @default(autoincrement())
    uuid         String   @unique @default(uuid()) @db.Uuid
    uuid_order   String   @db.Uuid
    uuid_product String   @db.Uuid
    quantity     Int
    unit_price   Float
    created_at   DateTime @default(now())
    updated_at   DateTime @default(now()) @updatedAt

    order   Order   @relation(fields: [uuid_order], references: [uuid])
    product Product @relation(fields: [uuid_product], references: [uuid])

    @@index([uuid_order, uuid_product, id, uuid])
}

model Favorite {
    id           String   @id @default(uuid())
    uuid_user    String   @unique @db.Uuid
    uuid_product String   @db.Uuid
    created_at   DateTime @default(now())
    updated_at   DateTime @default(now()) @updatedAt

    user    User    @relation(fields: [uuid_user], references: [uuid])
    product Product @relation(fields: [uuid_product], references: [uuid])

    @@unique([uuid_user, uuid_product])
    @@index([uuid_user, id])
}

model ProductCategory {
    uuid_product  String  @db.Uuid
    uuid_category String  @db.Uuid
    created_at    DateTime @default(now())
    updated_at    DateTime @default(now()) @updatedAt

    product  Product  @relation(fields: [uuid_product], references: [uuid], onDelete: Cascade)
    category Category @relation(fields: [uuid_category], references: [uuid])

    @@id([uuid_product, uuid_category])
    @@index([uuid_product, uuid_category])
}

model Category {
    id         Int      @id @default(autoincrement())
    uuid       String   @unique @default(uuid()) @db.Uuid
    name       String   @unique
    created_at DateTime @default(now())
    updated_at DateTime @default(now()) @updatedAt

    products ProductCategory[]
}

model ProductImages {
    id           Int      @id @default(autoincrement())
    uuid         String   @unique @default(uuid()) @db.Uuid
    uuid_product String    @db.Uuid
    image_url    String
    created_at   DateTime @default(now())
    updated_at   DateTime @default(now()) @updatedAt

    product Product @relation(fields: [uuid_product], references: [uuid])

    @@index([uuid_product, id])
}
