// Prisma Client Generator
generator client {
    provider = "prisma-client-js"
}

// PostgreSQL Database Configuration
datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum RoleName {
    MANAGER
    CLIENT
}

enum TokenType {
    resetPassword
}

enum StatusPaymentType {
    PENDING
    SUCCEDED
    CANCELED
}

model Users {
    id        String   @id @default(uuid())
    firstName String
    lastName  String
    userName  String
    email     String   @unique
    roleId    Int      @default(2)
    address   String
    password  String
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    role               UserRoles            @relation(fields: [roleId], references: [id])
    Carts              Carts[]
    Orders             Orders[]
    Favorites          Favorites[]
    verificationTokens VerificationTokens[]

    @@index([email, id])
}

model UserRoles {
    id        Int      @id @default(autoincrement())
    name      RoleName
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    users Users[]
}

model VerificationTokens {
    id          String   @id @default(uuid())
    token       String   @unique
    userId      String
    tokenTypeId Int
    expiredAt   DateTime
    createdAt   DateTime @default(now())
    updatedAt   DateTime @default(now()) @updatedAt

    user      Users      @relation(fields: [userId], references: [id])
    tokenType TokenTypes @relation(fields: [tokenTypeId], references: [id])

    @@index([userId])
    @@index([expiredAt])
}

model TokenTypes {
    id        Int       @id @default(autoincrement())
    tokenName TokenType
    createdAt DateTime  @default(now())
    updatedAt DateTime  @default(now()) @updatedAt

    verificationTokens VerificationTokens[]
}

model Products {
    id          String   @id @default(uuid())
    name        String
    description String
    stock       Int
    isAvailable Boolean  @default(true)
    price       Float
    createdAt   DateTime @default(now())
    updatedAt   DateTime @default(now()) @updatedAt

    CartItems    CartItems[]
    OrderDetails OrderDetails[]
    Favorites    Favorites[]
    Categories   ProductCategories[]
    images       ProductImages[]

    @@index([id, isAvailable])
}

model Carts {
    id        String   @id @default(uuid())
    userId    String   @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    user      Users       @relation(fields: [userId], references: [id])
    CartItems CartItems[]

    @@index([userId])
}

model CartItems {
    id        String   @id @default(uuid())
    cartId    String
    productId String
    quantity  Int
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    cart    Carts    @relation(fields: [cartId], references: [id])
    product Products @relation(fields: [productId], references: [id])

    @@unique([cartId, productId])
    @@index([cartId, productId])
}

model Orders {
    id        String   @id @default(uuid())
    userId    String
    address   String
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    user          Users           @relation(fields: [userId], references: [id])
    OrderDetails  OrderDetails[]
    paymentDetail PaymentDetails?

    @@index([id, userId])
}

model OrderDetails {
    id        String   @id @default(uuid())
    orderId   String
    productId String
    quantity  Int
    price     Float
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    order   Orders   @relation(fields: [orderId], references: [id])
    product Products @relation(fields: [productId], references: [id])

    @@index([orderId, productId, id])
}

model Favorites {
    id        String   @id @default(uuid())
    userId    String
    productId String
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    user    Users    @relation(fields: [userId], references: [id])
    product Products @relation(fields: [productId], references: [id])

    @@unique([userId, productId])
    @@index([userId, id])
}

model ProductCategories {
    productId  String
    categoryId Int
    createdAt  DateTime @default(now())
    updatedAt  DateTime @default(now()) @updatedAt

    product  Products   @relation(fields: [productId], references: [id], onDelete: Cascade)
    category Categories @relation(fields: [categoryId], references: [id])

    @@id([productId, categoryId])
    @@index([productId, categoryId])
}

model Categories {
    id        Int      @id @default(autoincrement())
    name      String   @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    Products ProductCategories[]
}

model ProductImages {
    id        String   @id @default(uuid())
    productId String
    imageUrl  String
    publicId  String   @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    product Products @relation(fields: [productId], references: [id])

    @@index([productId, id])
}

model PaymentDetails {
    id              String   @id @default(uuid())
    paymentIntentId String   @unique
    paymentMethodId String
    orderId         String   @unique
    amount          Int
    statusId        Int      @default(1)
    createdAt       DateTime @default(now())
    updatedAt       DateTime @default(now()) @updatedAt
    paymentDate     DateTime

    order  Orders         @relation(fields: [orderId], references: [id])
    status StatusPayments @relation(fields: [statusId], references: [id])

    @@index([orderId])
}

model StatusPayments {
    id        Int               @id @default(autoincrement())
    status    StatusPaymentType
    createdAt DateTime          @default(now())
    updatedAt DateTime          @default(now()) @updatedAt

    PaymentDetails PaymentDetails[]
}
